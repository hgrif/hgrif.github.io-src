<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Henk Griffioen</title>
<link>https://hgrif.github.io/hgrif.github.io-src/posts.html</link>
<atom:link href="https://hgrif.github.io/hgrif.github.io-src/posts.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.6.40</generator>
<lastBuildDate>Mon, 01 Apr 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Whitepaper: MLOps Beyond the Hype [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>mlops</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Mon, 01 Apr 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to Measure Your MLOps Performance [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>mlops</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Mon, 20 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>dbt tutorial: analytics engineering made easy [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>dbt</category>
  <category>analytics engineering</category>
  <category>bigquery</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Wed, 12 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Rhyme with AI [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>data science</category>
  <category>nlp</category>
  <category>llm</category>
  <category>bert</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Sat, 08 Feb 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fairness in AI [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>data science</category>
  <category>fairness</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Tue, 23 Jul 2019 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Whitepaper: Analytics Translator [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Mon, 01 Apr 2019 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Write less terrible code with Jupyter Notebook [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Sun, 05 Aug 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fairness in Machine Learning with PyTorch [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Tue, 22 May 2018 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Handcrafting Recurrent Neural Networks to count</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/</link>
  <description><![CDATA[ 





<p>Recurrent neural networks (RNNs) handle complex problems like convert speech to text like a pro. This blog shows the basics of RNNs by teaching a RNN to count.</p>
<p>RNNs are well suited for problems with sequences like captioning images and converting speech to text. The former generates an sequence of words from an image, the latter translate a stream of audio into words.</p>
<p>State of the art RNNs can choose to remember or forget a part of a sequence, and can learn to which part to attend to. Some fantastic blogs on this topic are <a href="https://karpathy.github.io/2015/05/21/rnn-effectiveness/">The Unreasonable Effectiveness of Recurrent Neural Networks</a>, <a href="https://colah.github.io/posts/2015-08-Understanding-LSTMs/">Understanding LSTM Networks</a> and <a href="http://distill.pub/2016/augmented-rnns/">Attention and Augmented Recurrent Neural Networks</a>.</p>
<p>I wrote this blog while trying to reproduce some of the results of <a href="http://blog.echen.me/2017/05/30/exploring-lstms/">Exploring LSTMs</a>. Let’s first go back to the basics!</p>
<section id="the-basics" class="level2">
<h2 class="anchored" data-anchor-id="the-basics">1. The basics</h2>
<p>Consider the situation where we start of with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">, some image data, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D">, labels indicating if the image does or does not contain a dog. Our neural network should do some magical operations to find all the dogs in the images.</p>
<section id="feedforward-nets" class="level3">
<h3 class="anchored" data-anchor-id="feedforward-nets">Feedforward nets</h3>
<p>The most basic neural network is a feedforward network, shown in the figure below. On the left, a network with one layer with two hidden units. On the right, a compact notation of the left image representing a network with an arbitrary number of hidden units.</p>
<p style="text-align:center;">
<img src="https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/images/feedforward-architecture.png" alt="Drawing" style="width: 30%; border: #000000 1px outset;">
</p>
<p>This network adds constant values to the input <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D">, weights the result and passes this through some function <img src="https://latex.codecogs.com/png.latex?f">. This gives use the activations <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D"> in the hidden layer:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D=f%20%5Cleft(%5Cmathbf%7BW%7D%5ET%20%5Cmathbf%7Bx%7D%20%20+%20%5Cmathbf%7Bb%7D%20%5Cright)"></p>
<p>To get our predictions <img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cmathbf%7By%7D%7D"> we’ll do the same with <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D">:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Chat%7B%5Cmathbf%7By%7D%7D=g%20%5Cleft(%5Cmathbf%7Bw%7D%5ET%20%5Cmathbf%7Bh%7D%20+%20%5Cmathbf%7Bc%7D%20%5Cright)"></p>
<p>Learning is the process of optimizing the parameters <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BW%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bb%7D">, <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bw%7D"> and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bc%7D"> so that we get correct predictions.</p>
<p>Before learning, the network starts with some random values for its parameters. The data <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BX%7D"> is fed forward through our functions, resulting in predictions. The predictions are compared to the ground truth and the error is backpropagated through the network so we can find better values for our values. Doing this many times will (hopefully) teach the network to recognize dogs.</p>
<p>Deep Learning is the process of finding the architecture of the network (e.g.&nbsp;how many hidden layers &amp; units to use) and teaching it to learn. This process often involves waiting, throwing a lot of money on GPU’s and burning out PhD students. Deep Learning is not for the faint of heart.</p>
<p>The network in the figure above does not really deal well with sequences. Let’s say you get one of these ambiguous images:</p>
<p style="text-align:center;">
<img src="https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/images/chihuahua-muffin.png" alt="Drawing" style="width: 30%; border: #000000 1px outset;">
</p>
<p>If you just saw a picture of a tiny dog house, you’re probably more likely to think that the weird object in the picture is a chihuahua and not a muffin. This makes sense: context matters.</p>
<p>Our network learns its parameters once and has a fixed state, so it cannot take context into account. It’s opinion doesn’t change depending on what it just saw. We’ll have to find a network architecture that can remember.</p>
</section>
<section id="recurrent-neural-nets" class="level3">
<h3 class="anchored" data-anchor-id="recurrent-neural-nets">Recurrent neural nets</h3>
<p>A recurrent neural network updates an internal state based on what it has seen so far. A diagram is shown below.</p>
<p style="text-align:center;">
<img src="https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/images/rnn-architecture.png" alt="Drawing" style="width: 60%; border: #000000 1px outset;">
</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D"> is now a sequence of data for multiple time steps <img src="https://latex.codecogs.com/png.latex?t">. A sequence can consist, for exampe, of images, words or phrases uttered. At any given time <img src="https://latex.codecogs.com/png.latex?t">, we construct an idea <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D%5E%7B(t)%7D"> from <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bx%7D%5E%7B(t)%7D">, our new input, and <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D%5E%7B(t-1)%7D">, our ideas so far. For the formula-minded audience:</p>
<p><img src="https://latex.codecogs.com/png.latex?%20%5Cmathbf%7Bh%7D%5E%7B(t)%7D%20=f%20%5Cleft(%5Cmathbf%7Bh%7D%5E%7B(t-1)%7D,%20%5Cmathbf%7Bx%7D%5E%7B(t)%7D;%20%5Cboldsymbol%7B%5Ctheta%7D%20%5Cright)%20"></p>
<p>(All the parameters for this layer are put in <img src="https://latex.codecogs.com/png.latex?%5Cboldsymbol%7B%5Ctheta%7D">.)</p>
<p>This specific architecture waits for the whole sequence to end, but there are also forms that generate output for each time step. Similarly in real life, we can wait for someone to finish her sentence before translating it or try to translate someone on the fly. We’ll learn a neural network to count with the former approach.</p>
</section>
</section>
<section id="the-counting-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-counting-problem">2. The counting problem</h2>
<p>This counting problem will show that a RNN is able to keep a state. Our RNN will see a sequence of <code>a</code>’s and has to output the same number of <code>b</code>’s. Counting for this tasks means keeping track of how many <code>a</code>’s it has seen and the <code>b</code>’s outputted so far.</p>
<p>The data looks like this:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'axb'</span>,</span>
<span id="cb1-2"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaxbb'</span>,</span>
<span id="cb1-3"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaxbbb'</span>,</span>
<span id="cb1-4"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaxbbbb'</span>,</span>
<span id="cb1-5"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaxbbbbb'</span>,</span>
<span id="cb1-6"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaxbbbbbb'</span>,</span>
<span id="cb1-7"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaxbbbbbbb'</span>,</span>
<span id="cb1-8"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaxbbbbbbbb'</span>,</span>
<span id="cb1-9"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaxbbbbbbbbb'</span>,</span>
<span id="cb1-10"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaaxbbbbbbbbbb'</span>,</span>
<span id="cb1-11"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaaaxbbbbbbbbbbb'</span>,</span>
<span id="cb1-12"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaaaaxbbbbbbbbbbbb'</span>,</span>
<span id="cb1-13"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaaaaaxbbbbbbbbbbbbb'</span>,</span>
<span id="cb1-14"> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'aaaaaaaaaaaaaaxbbbbbbbbbbbbbb'</span>]</span></code></pre></div>
<p>Here we have:</p>
<ul>
<li><code>aaa</code>: the sequence to count;</li>
<li><code>x</code>: a switch character telling that the sequence has ended and prediction should start;</li>
<li><code>bbb</code>: the sequence to output.</li>
</ul>
<p>We’ll add another special character: <code>s</code>. <code>s</code> signals that the sequence has ended and is also used for padding so that all our sequences are of the same length.</p>
</section>
<section id="preprocessing" class="level2">
<h2 class="anchored" data-anchor-id="preprocessing">3. Preprocessing</h2>
<p>We’ll generate all possible combinations of sentences and the next character to be predicted by moving through the text. The network is asked to predict <code>b</code>’s after <code>x</code>, for example:</p>
<pre><code>Text: aaxbb
Sentences: ['aax', 'aaxb', 'aaxbb']
Next char: ['b', 'b', 's']</code></pre>
<p>We’ll have to vectorize the text into numerical features so that <code>keras</code> can use it.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">Element of X:</span>
<span id="cb3-2">        a      b      x      s</span>
<span id="cb3-3"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-4"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>    <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-5"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-6"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-7"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>   <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-8">...</span>
<span id="cb3-9"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">26</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-10"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">27</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-11"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">28</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-12"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">29</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-13"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb3-14">Element of y:</span>
<span id="cb3-15"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>In this example, the columns correspond with <code>a</code>, <code>b</code>, <code>x</code> or <code>s</code> and the rows are the characters of the sequence (note that we’re missing padding in this example). Our <code>X</code> consists of matrices stacked like this. An element of <code>y</code> is a single boolean value indicating if a <code>b</code> should be predicted.</p>
</section>
<section id="the-network" class="level2">
<h2 class="anchored" data-anchor-id="the-network">4. The network</h2>
<p>What kind of architecture should our model have?</p>
<p>We’ll feed in <code>X</code> and want to predict for a single class (<code>b</code> or not <code>b</code>). The last layer should thus be a single node dense layer with sigmoid activation, but how is the network going to count?</p>
<p>As this is a fairly simple task, a plain old RNN should be good enough:</p>
<p style="text-align:center;">
<img src="https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/images/counting-architecture.png" alt="Drawing" style="width: 60%; border: #000000 1px outset;">
</p>
<p>Our RNN should keep track of the number <code>a</code>’s seen and <code>b</code>’s outputted so far and decide whether to output another <code>b</code>.</p>
<section id="handcrafting" class="level3">
<h3 class="anchored" data-anchor-id="handcrafting">Handcrafting</h3>
<p>We can let the model learn, but we can also handcraft the neural network ourself! Our RNN should increment a counter for every <code>a</code> it has seen and increase a different counter for every <code>b</code> it has predicted. A <code>b</code> should only be predicted if the count for observed <code>a</code>’s is higher than for predicted <code>b</code>’s.</p>
<p>The RNN should thus consist of two units with a linear activation function. The update equations for our neural network are:</p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7Bh%7D%5E%7B(t)%7D_%7BRNN%7D=%5Cmathbf%7Bb%7D_%7BRNN%7D%20+%20%5Cmathbf%7BW%7D_%7BRNN%7D%20%5Cmathbf%7Bh%7D%5E%7B(t-1)%7D_%7BRNN%7D%20+%20%5Cmathbf%7BU%7D_%7BRNN%7D%20%5Cmathbf%7Bx%7D%5E%7B(t)%7D"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7By%7D=%5Cmathsf%7Bsigmoid%7D%20%5Cleft(%20%5Cmathbf%7Bb%7D_%7Bdense%7D%20+%20%5Cmathbf%7BW%7D_%7Bdense%7D%20%5Cmathbf%7Bh%7D%5E%7B(T)%7D_%7BRNN%7D%20%5Cright)"></p>
<p>We can create this network in <code>keras</code> with:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">n_remember_units <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb4-2"></span>
<span id="cb4-3">sequence_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers.Input(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb4-4">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers.SimpleRNN(n_remember_units, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'linear'</span>,</span>
<span id="cb4-5">                     name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rnn'</span>)(sequence_input)</span>
<span id="cb4-6">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers.Dense(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, activation<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sigmoid'</span>, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'dense'</span>)(x)</span>
<span id="cb4-7">counting_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.Model(sequence_input, x)</span></code></pre></div>
<p>Each unit focusses on one character: <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BU%7D_%7BRNN%7D"> is only non-zero if an <code>a</code> or <code>b</code> is seen for its unit. The units should only look at its own previous states, so <img src="https://latex.codecogs.com/png.latex?%5Cmathbf%7BW%7D_%7BRNN%7D"> is a diagonal matrix with ones. Choosing a value of one for these matrices will add the input (if it’s <code>b</code> or not) to the number of <code>b</code>’s seen.</p>
<p>The dense layer substracts the input of the <code>b</code> unit from the <code>a</code> unit, and converts it to a probability. We’ll weigh the counts coming from the RNNs with +0.5 for <code>a</code> and -0.5 for <code>b</code>.</p>
<p>The probability will be higher than 0.5 if <code>n_a</code> &gt; <code>n_b</code>. All biases are zero. (Question for the reader: why do we need <img src="https://latex.codecogs.com/png.latex?%3E%200.5"> and not <img src="https://latex.codecogs.com/png.latex?%5Cgeq%200.5">?).</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">weights <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb5-2">    np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb5-3">              [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],</span>
<span id="cb5-4">              [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb5-5">              [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb5-6">             ]),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># U_RNN</span></span>
<span id="cb5-7">    np.array([[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb5-8">              [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]]),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># W_RNN</span></span>
<span id="cb5-9">    np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b_RNN</span></span>
<span id="cb5-10">    np.array([[<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>], [<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span>]]),  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># W_dense</span></span>
<span id="cb5-11">    np.array([<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># b_dense</span></span>
<span id="cb5-12">]</span>
<span id="cb5-13"></span>
<span id="cb5-14">counting_model.set_weights(weights)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># No .compile() and .fit() needed!</span></span></code></pre></div>
<p>Will this really work?</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> classification_report</span>
<span id="cb6-2"></span>
<span id="cb6-3"></span>
<span id="cb6-4">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> counting_model.predict(X) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb6-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(classification_report(y_pred, y))</span>
<span id="cb6-6">             precision    recall  f1<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>score   support</span>
<span id="cb6-7"></span>
<span id="cb6-8">      <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>       <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">196</span></span>
<span id="cb6-9">       <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>       <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">105</span></span>
<span id="cb6-10"></span>
<span id="cb6-11">avg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> total       <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>      <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.00</span>       <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">301</span></span></code></pre></div>
<p>Yes, it works!</p>
<p>Let’s investigate what’s happening inside the RNN. To see what the the RNN is doing, we can discard the last classification layer and look into the RNN layer. Create a new model without the dense layer and tell the RNN layer to return the full sequences instead of only the last hidden state:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sequence_input <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers.Input(X.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:])</span>
<span id="cb7-2">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> layers.SimpleRNN(n_remember_units, return_sequences<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb7-3">                     weights<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>counting_model.layers[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>].get_weights())(sequence_input)</span>
<span id="cb7-4">hidden_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> models.Model(sequence_input, x)</span></code></pre></div>
<p>Calling <code>hidden_model.predict(X)</code> will give use the full sequence. Let’s look at what the hidden states are for a full sequence:</p>
<p style="text-align:center;">
<img src="https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/images/hidden_state_rnn.png" alt="Drawing" style="width: 60%; border: #000000 1px outset;">
</p>
<p>The hidden state of cell 0 slowly increases as it sees more <code>a</code>’s. If no <code>a</code>’s are present, the weighted average of the hidden state and the input (0) slowly decreases its value. The same happens for cell 1 that’s looking at <code>b</code>’s. The output of cell 1 is substracted from the output of cell 0 and comparing it to 0.5 indicates if another <code>b</code> should be outputted. This allows our RNN to perfectly solve this problem!</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">4. Conclusion</h2>
<p>We solved the problem, but did our RNN learn how to count? Not really: our RNN perfectly solves the problem but does not understand the concept of counting. The RNN can hold states and can compare them but it did not solve the underlying problem. Nevertheless, this blog (hopefully) demonstrated that RNNs can hold state and this can be used for far more complex problems!</p>


</section>

 ]]></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/posts/handcrafting-rnns-to-count/</guid>
  <pubDate>Mon, 27 Nov 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Airflow Tutorial</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/posts/airflow-tutorial/</link>
  <description><![CDATA[ 





<p><a href="https://airflow.incubator.apache.org/">Airflow</a> is a scheduler for workflows such as data pipelines, similar to <a href="https://github.com/spotify/luigi">Luigi</a> and <a href="https://oozie.apache.org/">Oozie</a>.</p>
<p>This tutorial is loosely based on the Airflow tutorial in the <a href="https://pythonhosted.org/airflow/tutorial.html">official documentation</a>. It will walk you through the basics of setting up Airflow and creating an Airflow workflow, and it will give you some practical tips. A (possibly) more up-to-date version of this blog can be found in my <a href="https://github.com/hgrif/airflow-tutorial">git repo</a>.</p>
<section id="setup" class="level2">
<h2 class="anchored" data-anchor-id="setup">1. Setup</h2>
<p>Setting up a basic configuration of Airflow is pretty straightforward. After installing the Python package, we’ll need a database to store some data and start the core Airflow services.</p>
<p>You can skip this section if Airflow is already set up. Make sure that you can run <code>airflow</code> commands, know where to put your DAGs and have access to the web UI.</p>
<section id="install-airflow" class="level4">
<h4 class="anchored" data-anchor-id="install-airflow">Install Airflow</h4>
<p>Airflow is installable with <code>pip</code> via a simple <code>pip install apache-airflow</code>. Either use a separate Python virtual environment or install it in your default python environment.</p>
<p>To use the conda virtual environment as defined in <code>environment.yml</code> from my <a href="https://github.com/hgrif/airflow-tutorial">git repo</a>:</p>
<ul>
<li>Install <a href="http://conda.pydata.org/miniconda.html">miniconda</a>.</li>
<li>Make sure that conda is on your path:</li>
</ul>
<pre class="{bash}"><code>$ which conda
~/miniconda3/bin/conda</code></pre>
<ul>
<li>Create the virtual environment from <code>environment.yml</code>:</li>
</ul>
<pre class="{bash}"><code>$ conda env create -f environment.yml</code></pre>
<ul>
<li>Activate the virtual environment:</li>
</ul>
<pre class="{bash}"><code>$ source activate airflow-tutorial</code></pre>
<p>You should now have an (almost) working Airflow installation.</p>
<p>Alternatively, install Airflow yourself by running:</p>
<pre class="{bash}"><code>$ pip install apache-airflow</code></pre>
<p>Airflow used to be packaged as <code>airflow</code> but is packaged as <code>apache-airflow</code> since version 1.8.1. Make sure that you install any extra packages with the right Python package: e.g.&nbsp;use <code>pip install apache-airflow[dask]</code> if you’ve installed <code>apache-airflow</code> and do not use <code>pip install airflow[dask]</code>. Leaving out the prefix <code>apache-</code> will install an old version of Airflow next to your current version, leading to a world of hurt.</p>
<p>You may run into problems if you don’t have the right binaries or Python packages installed for certain backends or operators. When specifying support for e.g.&nbsp;PostgreSQL when installing extra Airflow packages, make sure the database is installed; do a <code>brew install postgresql</code> or <code>apt-get install postgresql</code> before the <code>pip install apache-airflow[postgres]</code>. Similarly, when running into HiveOperator errors, do a <code>pip install apache-airflow[hive]</code> and make sure you can use Hive.</p>
</section>
<section id="run-airflow" class="level4">
<h4 class="anchored" data-anchor-id="run-airflow">Run Airflow</h4>
<p>Before you can use Airflow you have to initialize its database. The database contains information about historical &amp; running workflows, connections to external data sources, user management, etc. Once the database is set up, Airflow’s UI can be accessed by running a web server and workflows can be started.</p>
<p>The default database is a SQLite database, which is fine for this tutorial. In a production setting you’ll probably be using something like MySQL or PostgreSQL. You’ll probably want to back it up as this database stores the state of everything related to Airflow.</p>
<p>Airflow will use the directory set in the environment variable <code>AIRFLOW_HOME</code> to store its configuration and our SQlite database. This directory will be used after your first Airflow command. If you don’t set the environment variable <code>AIRFLOW_HOME</code>, Airflow will create the directory <code>~/airflow/</code> to put its files in.</p>
<p>Set environment variable <code>AIRFLOW_HOME</code> to e.g.&nbsp;your current directory <code>$(pwd)</code>:</p>
<pre class="{bash}"><code># change the default location ~/airflow if you want:
$ export AIRFLOW_HOME="$(pwd)"</code></pre>
<p>or any other suitable directory.</p>
<p>Next, initialize the database:</p>
<pre class="{bash}"><code>$ airflow initdb</code></pre>
<p>Now start the web server and go to <a href="http://localhost:8080/">localhost:8080</a> to check out the UI:</p>
<pre class="{bash}"><code>$ airflow webserver --port 8080</code></pre>
<p>It should look something like this:</p>
<p><img src="https://airflow.incubator.apache.org/_images/dags.png" style="width: 70%;"></p>
<p>With the web server running workflows can be started from a new terminal window. Open a new terminal, activate the virtual environment and set the environment variable <code>AIRFLOW_HOME</code> for this terminal as well:</p>
<pre class="{bash}"><code>$ source activate airflow-tutorial
$ export AIRFLOW_HOME="$(pwd)"</code></pre>
<p>Make sure that you’re an in the same directory as before when using <code>$(pwd)</code>.</p>
<p>Run a supplied example:</p>
<pre class="{bash}"><code>$ airflow run example_bash_operator runme_0 2017-07-01</code></pre>
<p>And check in the web UI that it has run by going to Browse -&gt; Task Instances.</p>
<p>This concludes all the setting up that you need for this tutorial.</p>
</section>
<section id="tips" class="level4">
<h4 class="anchored" data-anchor-id="tips">Tips</h4>
<ul>
<li>Both Python 2 and 3 are be supported by Airflow. However, some of the lesser used parts (e.g.&nbsp;operators in <code>contrib</code>) might not support Python 3.</li>
<li>For more information on configuration check the sections on <a href="https://airflow.incubator.apache.org/configuration.html">Configuration</a> and <a href="https://airflow.incubator.apache.org/security.html">Security</a> of the Airflow documentation.</li>
<li>Check the <a href="https://github.com/apache/incubator-airflow/tree/master/scripts">Airflow repository</a> for <code>upstart</code> and <code>systemd</code> templates.</li>
<li>Airflow logs extensively, so pick your log folder carefully.</li>
<li>Set the timezone of your production machine to UTC: Airflow assumes it’s UTC.</li>
</ul>
</section>
</section>
<section id="workflows" class="level2">
<h2 class="anchored" data-anchor-id="workflows">2. Workflows</h2>
<p>We’ll create a workflow by specifying actions as a Directed Acyclic Graph (DAG) in Python. The tasks of a workflow make up a Graph; the graph is Directed because the tasks are ordered; and we don’t want to get stuck in an eternal loop so the graph also has to be Acyclic.</p>
<p>The figure below shows an example of a DAG:</p>
<p><img src="https://airflow.incubator.apache.org/_images/subdag_before.png" style="width: 60%;"></p>
<p>The DAG of this tutorial is a bit easier. It will consist of the following tasks:</p>
<ul>
<li>print <code>'hello'</code></li>
<li>wait 5 seconds</li>
<li>print <code>'world</code></li>
</ul>
<p>and we’ll plan daily execution of this workflow.</p>
<section id="create-a-dag-file" class="level4">
<h4 class="anchored" data-anchor-id="create-a-dag-file">Create a DAG file</h4>
<p>Go to the folder that you’ve designated to be your <code>AIRFLOW_HOME</code> and find the DAGs folder located in subfolder <code>dags/</code> (if you cannot find, check the setting <code>dags_folder</code> in <code>$AIRFLOW_HOME/airflow.cfg</code>). Create a Python file with the name <code>airflow_tutorial.py</code> that will contain your DAG. Your workflow will automatically be picked up and scheduled to run.</p>
<p>First we’ll configure settings that are shared by all our tasks. Settings for tasks can be passed as arguments when creating them, but we can also pass a dictionary with default values to the DAG. This allows us to share default arguments for all the tasks in our DAG is the best place to set e.g.&nbsp;the owner and start date of our DAG.</p>
<p>Add the following import and dictionary to <code>airflow_tutorial.py</code> to specify the owner, start time, and retry settings that are shared by our tasks:</p>
</section>
<section id="configure-common-settings" class="level4">
<h4 class="anchored" data-anchor-id="configure-common-settings">Configure common settings</h4>
<div id="20538401" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dt</span>
<span id="cb10-2"></span>
<span id="cb10-3">default_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb10-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'owner'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'me'</span>,</span>
<span id="cb10-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start_date'</span>: dt.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb10-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retries'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb10-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retry_delay'</span>: dt.timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb10-8">}</span></code></pre></div>
</div>
<p>These settings tell Airflow that this workflow is owned by <code>'me'</code>, that the workflow is valid since June 1st of 2017, it should not send emails and it is allowed to retry the workflow once if it fails with a delay of 5 minutes. Other common default arguments are email settings on failure and the end time.</p>
</section>
<section id="create-the-dag" class="level4">
<h4 class="anchored" data-anchor-id="create-the-dag">Create the DAG</h4>
<p>We’ll now create a DAG object that will contain our tasks.</p>
<p>Name it <code>airflow_tutorial_v01</code> and pass <code>default_args</code>:</p>
<div id="5b552a2f" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'airflow_tutorial_v01'</span>,</span>
<span id="cb11-4">         default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>default_args,</span>
<span id="cb11-5">         schedule_interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0 * * * *'</span>,</span>
<span id="cb11-6">         ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dag:</span></code></pre></div>
</div>
<p>With <code>schedule_interval='0 * * * *'</code> we’ve specified a run at every hour 0; the DAG will run each day at 00:00. See <a href="https://crontab.guru/#0_*_*_*_*">crontab.guru</a> for help deciphering cron schedule expressions. Alternatively, you can use strings like <code>'@daily'</code> and <code>'@hourly'</code>.</p>
<p>We’ve used a <a href="https://jeffknupp.com/blog/2016/03/07/python-with-context-managers/">context manager</a> to create a DAG (new since 1.8). All the tasks for the DAG should be indented to indicate that they are part of this DAG. Without this context manager you’d have to set the <code>dag</code> parameter for each of your tasks.</p>
<p>Airflow will generate DAG runs from the <code>start_date</code> with the specified <code>schedule_interval</code>. Once a DAG is active, Airflow continuously checks in the database if all the DAG runs have successfully ran since the <code>start_date</code>. Any missing DAG runs are automatically scheduled. When you initialize on 2016-01-04 a DAG with a <code>start_date</code> at 2016-01-01 and a daily <code>schedule_interval</code>, Airflow will schedule DAG runs for all the days between 2016-01-01 and 2016-01-04.</p>
<p>A run starts <em>after</em> the time for the run has passed. The time for which the workflow runs is called the <code>execution_date</code>. The daily workflow for 2016-06-02 runs after 2016-06-02 23:59 and the hourly workflow for 2016-07-03 01:00 starts after 2016-07-03 01:59.</p>
<p>From the ETL viewpoint this makes sense: you can only process the daily data for a day after it has passed. This can, however, ask for some juggling with date for other workflows. For Machine Learning models you may want to use all the data up to a given date, you’ll have to add the <code>schedule_interval</code> to your <code>execution_date</code> somewhere in the workflow logic.</p>
<p>Because Airflow saves all the (scheduled) DAG runs in its database, you should not change the <code>start_date</code> and <code>schedule_interval</code> of a DAG. Instead, up the version number of the DAG (e.g.&nbsp;<code>airflow_tutorial_v02</code>) and avoid running unnecessary tasks by using the web interface or command line tools</p>
<p>Timezones and especially daylight savings can mean trouble when scheduling things, so keep your Airflow machine in UTC. You don’t want to skip an hour because daylight savings kicks in (or out).</p>
</section>
<section id="create-the-tasks" class="level4">
<h4 class="anchored" data-anchor-id="create-the-tasks">Create the tasks</h4>
<p>Tasks are represented by operators that either perform an action, transfer data, or sense if something has been done. Examples of actions are running a bash script or calling a Python function; of transfers are copying tables between databases or uploading a file; and of sensors are checking if a file exists or data has been added to a database.</p>
<p>We’ll create a workflow consisting of three tasks: we’ll print ‘hello’, wait for 10 seconds and finally print ‘world’. The first two are done with the <code>BashOperator</code> and the latter with the <code>PythonOperator</code>. Give each operator an unique task ID and something to do:</p>
<div id="37bbf714" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.bash_operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BashOperator</span>
<span id="cb12-2">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.python_operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PythonOperator</span>
<span id="cb12-3"></span>
<span id="cb12-4">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_world():</span>
<span id="cb12-5">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world'</span>)</span>
<span id="cb12-6"></span>
<span id="cb12-7">    print_hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print_hello'</span>,</span>
<span id="cb12-8">                               bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'echo "hello"'</span>)</span>
<span id="cb12-9">    sleep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sleep'</span>,</span>
<span id="cb12-10">                         bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sleep 5'</span>)</span>
<span id="cb12-11">    print_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print_world'</span>,</span>
<span id="cb12-12">                                 python_callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>print_world)</span></code></pre></div>
</div>
<p>Note how we can pass bash commands in the <code>BashOperator</code> and that the <code>PythonOperator</code> asks for a Python function that can be called.</p>
<p>Dependencies in tasks are added by setting other actions as upstream (or downstream). Link the operations in a chain so that <code>sleep</code> will be run after <code>print_hello</code> and is followed by <code>print_world</code>; <code>print_hello</code> -&gt; <code>sleep</code> -&gt; <code>print_world</code>:</p>
<div id="096d9af7" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">print_hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> sleep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> print_world</span></code></pre></div>
</div>
<p>After rearranging the code your final DAG should look something like:</p>
<div id="17a26d52" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> datetime <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dt</span>
<span id="cb14-2"></span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DAG</span>
<span id="cb14-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.bash_operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BashOperator</span>
<span id="cb14-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> airflow.operators.python_operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PythonOperator</span>
<span id="cb14-6"></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_world():</span>
<span id="cb14-9">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'world'</span>)</span>
<span id="cb14-10"></span>
<span id="cb14-11"></span>
<span id="cb14-12">default_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb14-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'owner'</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'me'</span>,</span>
<span id="cb14-14">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start_date'</span>: dt.datetime(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2017</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>),</span>
<span id="cb14-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retries'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,</span>
<span id="cb14-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'retry_delay'</span>: dt.timedelta(minutes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>),</span>
<span id="cb14-17">}</span>
<span id="cb14-18"></span>
<span id="cb14-19"></span>
<span id="cb14-20"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> DAG(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'airflow_tutorial_v01'</span>,</span>
<span id="cb14-21">         default_args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>default_args,</span>
<span id="cb14-22">         schedule_interval<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'0 * * * *'</span>,</span>
<span id="cb14-23">         ) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> dag:</span>
<span id="cb14-24"></span>
<span id="cb14-25">    print_hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print_hello'</span>,</span>
<span id="cb14-26">                               bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'echo "hello"'</span>)</span>
<span id="cb14-27">    sleep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BashOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sleep'</span>,</span>
<span id="cb14-28">                         bash_command<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sleep 5'</span>)</span>
<span id="cb14-29">    print_world <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PythonOperator(task_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print_world'</span>,</span>
<span id="cb14-30">                                 python_callable<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>print_world)</span>
<span id="cb14-31"></span>
<span id="cb14-32"></span>
<span id="cb14-33">print_hello <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> sleep <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> print_world</span></code></pre></div>
</div>
</section>
<section id="test-the-dag" class="level4">
<h4 class="anchored" data-anchor-id="test-the-dag">Test the DAG</h4>
<p>First check that DAG file contains valid Python code by executing the file with Python:</p>
<pre class="{bash}"><code>$ python airflow_tutorial.py</code></pre>
<p>You can manually test a single task for a given <code>execution_date</code> with <code>airflow test</code>:</p>
<pre class="{bash}"><code>$ airflow test airflow_tutorial_v01 print_world 2016-07-01</code></pre>
<p>This runs the task locally as if it was for 2017-07-01, ignoring other tasks and without communicating to the database.</p>
</section>
<section id="activate-the-dag" class="level4">
<h4 class="anchored" data-anchor-id="activate-the-dag">Activate the DAG</h4>
<p>Now that you’re confident that your dag works, turn on the DAG in the web UI and sit back while Airflow starts backfilling the dag runs!</p>
</section>
<section id="tips-1" class="level4">
<h4 class="anchored" data-anchor-id="tips-1">Tips</h4>
<ul>
<li>Make your DAGs idempotent: rerunning them should give the game results.</li>
<li>Use the the cron notation for <code>schedule_interval</code> instead of <code>@daily</code> and <code>@hourly</code>. <code>@daily</code> and <code>@hourly</code> always run after respectively midnight and the full hour, regardless of the hour/minute specified.</li>
<li>Manage your connections and secrets with the <a href="https://airflow.incubator.apache.org/configuration.html#connections">Connections</a> and/or <a href="https://airflow.incubator.apache.org/ui.html#variable-view">Variables</a>.</li>
</ul>
</section>
</section>
<section id="exercises" class="level2">
<h2 class="anchored" data-anchor-id="exercises">3. Exercises</h2>
<p>You now know the basics of setting up Airflow, creating a DAG and turning it on; time to go deeper!</p>
<ul>
<li>Change the interval to every 30 minutes.</li>
<li>Use a sensor to add a delay of 5 minutes before starting.</li>
<li>Implement templating for the <code>BashOperator</code>: print the <code>execution_date</code> instead of <code>'hello'</code> (check out the <a href="https://airflow.incubator.apache.org/tutorial.html#templating-with-jinja">original tutorial</a> and the <a href="https://github.com/apache/incubator-airflow/blob/master/airflow/example_dags/example_bash_operator.py">example DAG</a>).</li>
<li>Use templating for the <code>PythonOperator</code>: print the <code>execution_date</code> with one hour added in the function <code>print_world()</code> (check out the documentation of the <a href="https://airflow.incubator.apache.org/code.html#airflow.operators.PythonOperator"><code>PythonOperator</code></a>).</li>
</ul>
</section>
<section id="resources" class="level2">
<h2 class="anchored" data-anchor-id="resources">4. Resources</h2>
<ul>
<li><a href="https://pythonhosted.org/airflow/tutorial.html">The official Airflow tutorial</a>: showing a bit more in-depth templating magic.</li>
<li><a href="https://gtoonstra.github.io/etl-with-airflow/">ETL best practices with Airflow</a>: good best practices to follow when using Airflow.</li>
<li><a href="https://medium.com/handy-tech/airflow-tips-tricks-and-pitfalls-9ba53fba14eb">Airflow: Tips, Tricks, and Pitfalls</a>: more explanations to help you grok Airflow.</li>
</ul>


</section>

 ]]></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/posts/airflow-tutorial/</guid>
  <pubDate>Fri, 11 Aug 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Apache Airflow Tutorial for Data Pipelines [xebia.com]</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/</link>
  <description></description>
  <category>data engineering</category>
  <category>airflow</category>
  <guid>https://hgrif.github.io/hgrif.github.io-src/</guid>
  <pubDate>Fri, 11 Aug 2017 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How to start a Data Science project in Python</title>
  <link>https://hgrif.github.io/hgrif.github.io-src/posts/start-data-science-project-python/</link>
  <description><![CDATA[ 





<p>A lot of blog posts are written on the complicated Data Science-y stuff but not so many posts talk about the simple stuff. A simple but very important topic is how to start and structure your projects. This post gives a few pointers for setting up your projects.</p>
<section id="project-structure" class="level2">
<h2 class="anchored" data-anchor-id="project-structure">Project structure</h2>
<p>Project structures often organically grow to suit people’s needs, leading to different project structures within a team. You can consider yourself lucky if at some point in time you, or someone in your team, finds an obscure blog post with a somewhat sane structure and enforces it in your team.</p>
<p>Many years ago I stumbled upon <a href="http://projecttemplate.net/">ProjectTemplate for R</a>. Since then I’ve tried to get people to use a good project structure. More recently <a href="https://www.drivendata.org/">DrivenData</a> released their more generic <a href="https://drivendata.github.io/cookiecutter-data-science/#cookiecutter-data-science">Cookiecutter Data Science</a>.</p>
<p>The main philosophies of those projects are:</p>
<ul>
<li>A consistent and well organized structure allows people to collaborate more easily.</li>
<li>Your analyses should be reproducible and your structure should enable that.</li>
<li>A projects starts from raw data that should never be edited; consider raw data immutable and only edit derived sources.</li>
</ul>
<p>I couldn’t help to invent my own project structure and my minimal structure looks something like this (example <a href="git@github.com:hgrif/example-project.git">here</a>):</p>
<pre><code>example_project/
├── data/               &lt;- The original, immutable data dump.
├── figures/            &lt;- Figures saved by notebooks and scripts.
├── notebooks/          &lt;- Jupyter notebooks.
├── output/             &lt;- Processed data, models, logs, etc.
├── exampleproject/     &lt;- Python package with source code.
│&nbsp;&nbsp; └── __init__.py     &lt;-- Make the folder a package.
    └── process.py      &lt;-- Example module.
├── tests/              &lt;- Tests for your Python package.
    └── test_process.py &lt;-- Tests for process.py.
├── environment.yml     &lt;- Virtual environment definition.
├── README.md           &lt;- README with info of the project.
└── setup.py            &lt;- Install and distribute your module.</code></pre>
<p>It mostly follows the other structures:</p>
<ul>
<li>raw data is immutable and goes to <code>data/</code>;</li>
<li>processed data and derived output goes to different folders like <code>figures/</code> and <code>output/</code>;</li>
<li>notebooks go to <code>notebooks/</code>;</li>
<li>project info goes in the <code>README.md</code>;</li>
<li>and the project code goes to a separate folder.</li>
</ul>
<p>I try to make a full-fledged Python package (plus tests) out of my project structure so that the step between prototyping and production is as small as possible. The <code>setup.py</code> allows me to install the package in a virtual environment and use it in my Notebooks (more on this in a later blog post).</p>
<p>It doesn’t really matter which structure you pick, as long as it fits your workflow and you stick with it for a while. Try to understand the philosophies of the projects and pick the structure that suits your needs.</p>
</section>
<section id="virtual-environment" class="level2">
<h2 class="anchored" data-anchor-id="virtual-environment">Virtual environment</h2>
<p>Projects should be independent of each other: you don’t want your new experiments to mess up your older work. We do this partly by putting the files of different projects in different folders but you should also use separate <em>Python</em> environments.</p>
<p>Virtual environments are isolated environments that separate dependencies of different projects and avoid package conflicts. Each virtual environment has its own packages and its own package versions. Environment A can have <code>numpy</code> version 1.11 and <code>pandas</code> version 0.18 while environment B only has <code>pandas</code> version 0.17. I like <a href="https://conda.io/miniconda.html">conda</a> virtual environments because they’re well suited for Data Science (read <a href="https://jakevdp.github.io/blog/2016/08/25/conda-myths-and-misconceptions/">here</a> why).</p>
<p>Create a new <a href="">conda</a> virtual environment called <code>example-project</code> with Python 3.5:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> conda install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> example-project python=3.5</span></code></pre></div>
<p>Make sure your virtual environment is activated (leave out the <code>source</code> if you’re on Window):</p>
<pre><code>$ source activate example-project</code></pre>
<p>… and you’re now ready to install your favourite packages!</p>
<pre><code>$ conda install pandas numpy jupyter scikit-learn</code></pre>
<p>When you’re switching to a different project, run a <code>source deactivate</code> and activate the project’s virtual environment.</p>
<p>Once you get the hang of the <code>activate</code>-<code>deactivate</code>-flow, you’ll find that a virtual environments is a lightweight tool to keep your Python environments separated. By exporting your environment definition file (i.e.&nbsp;all installed packages and their versions) your projects will also be easily reproducible. If you want a more detailed discussion, check <a href="http://tdhopper.com/blog/2015/Nov/24/my-python-environment-workflow-with-conda/">Tim Hopper’s post</a>.</p>
</section>
<section id="git" class="level2">
<h2 class="anchored" data-anchor-id="git">Git</h2>
<p>Every project should have its own Git repository. Having a repo per project allows you to track the history of a project and maintain complex version dependencies between projects.</p>
<p>Alternatively, you can choose to have one repository with multiple projects, putting all the knowledge in a single place. The downside is, however, that it often ends up with ugly merge conflicts: Data Scientists are generally not that fluent with Git. In addition to a lot of Git frustrations, it makes your projects less independent of eachother.</p>
<p>The easiest way to set up Git is by creating a new git repository on your Git host (e.g.&nbsp;<a href="https://help.github.com/articles/creating-a-new-repository/">GitHub</a> or <a href="https://docs.gitlab.com/ee/gitlab-basics/create-project.html">GitLab</a>) and cloning that:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git clone https://github.com/hgrif/</span></code></pre></div>
<p>You can then setup your project structure in this empty folder.</p>
<p>If you followed this guide and already created a folder with some files, first initialize a git repository on your machine:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git init</span></code></pre></div>
<p>Then create a new git repository on your host, get its link and run:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git remote add origin https://github.com/hgrif/</span></code></pre></div>
<p>This adds the remote repository with the link <code>https://github.com/hgrif/</code> and names it <code>origin</code>. You probably have to push your current <code>master</code> branch to <code>origin</code>:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">$</span> git push <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set-upstream</span> origin master</span></code></pre></div>
<p>Now that Git is set up, you can <code>git add</code> and <code>git commit</code> to your heart’s content!</p>
</section>
<section id="tooling" class="level2">
<h2 class="anchored" data-anchor-id="tooling">Tooling</h2>
<p>You can get away of some of the repetitive tasks by using some tooling!</p>
<p>The Python package <a href="https://cookiecutter.readthedocs.io/en/latest/"><code>cookiecutter</code></a> automatically creates project folders based on a template. You can use existing template like the <a href="https://github.com/drivendata/cookiecutter-data-science">Cookiecutter Data Science</a> or <a href="https://github.com/hgrif/cookiecutter-ds-python/tree/master/%7B%7B%20cookiecutter.repo_name%20%7D%7D">mine</a>, or invent your own.</p>
<p>The easiest way to use virtual environments is to use an editor like <a href="https://www.jetbrains.com/pycharm/">PyCharm</a> that supports them. You can also use <a href="https://github.com/kennethreitz/autoenv">autoenv</a> or <a href="https://direnv.net/">direnv</a> to activate a virtual environment and set environment variables if you <code>cd</code> into a directory.</p>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>Having a good setup for your Data Science projects makes it easier for other people to work on your projects and makes them more reproducible. A good structure, a virtual environment and a git repository are the building blocks of any project.</p>


</section>

 ]]></description>
  <guid>https://hgrif.github.io/hgrif.github.io-src/posts/start-data-science-project-python/</guid>
  <pubDate>Sun, 26 Feb 2017 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
